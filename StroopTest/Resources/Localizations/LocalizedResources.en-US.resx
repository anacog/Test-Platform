<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="audioList" xml:space="preserve">
    <value>Audio Lists:</value>
  </data>
  <data name="audioRecordSuccess" xml:space="preserve">
    <value>Successfully recorded audio.</value>
  </data>
  <data name="colors" xml:space="preserve">
    <value>Colors</value>
  </data>
  <data name="colorsList" xml:space="preserve">
    <value>Colors List</value>
  </data>
  <data name="description" xml:space="preserve">
    <value>The TestPlatform is a platform of computerized neuropsychological tests for the evaluation of executive functions. The product has the proposal to offer solutions innovating technologically in a practical and dynamic way. Intended for researchers, students and ordinary users. Developers: hugohon - Hugo Honda Ferreira and fabiolamfleury - Fabíola Fleury; 2017</value>
  </data>
  <data name="editProgram" xml:space="preserve">
    <value>Edit Program: </value>
  </data>
  <data name="emptyBox" xml:space="preserve">
    <value>Text field can't be empty.</value>
  </data>
  <data name="emptyList" xml:space="preserve">
    <value>The list is empty!</value>
  </data>
  <data name="emptyListName" xml:space="preserve">
    <value>The list name must be filled in.</value>
  </data>
  <data name="exclude" xml:space="preserve">
    <value>Delete: </value>
  </data>
  <data name="exclusionSucceeded" xml:space="preserve">
    <value>delete succeeded!</value>
  </data>
  <data name="experiment" xml:space="preserve">
    <value>Experiment</value>
  </data>
  <data name="experimentFiles" xml:space="preserve">
    <value>Path for experiments data is invalid.</value>
  </data>
  <data name="exportedFile" xml:space="preserve">
    <value>File exported successfully!</value>
  </data>
  <data name="fieldNotRight" xml:space="preserve">
    <value>Some field was not filled in correctly.</value>
  </data>
  <data name="imageFileError" xml:space="preserve">
    <value>Couldn't show image. You don't have permission to access this file or it can be corrupted.\n</value>
  </data>
  <data name="imageList" xml:space="preserve">
    <value>Image Lists:</value>
  </data>
  <data name="instructionBoxText" xml:space="preserve">
    <value>The participant must be clearly and uniformly oriented to test execution accordingly to participant group and experiment team.&lt;br&gt;&lt;br&gt;For classic Stroop Test basic instructions are: &lt;br&gt;'In this task you must speak the name of the color in which the words are painted.'&lt;br&gt;or&lt;br&gt;'In this task you should read the word displayed on the screen.'</value>
  </data>
  <data name="invalidPath" xml:space="preserve">
    <value>is an invalid path.</value>
  </data>
  <data name="list" xml:space="preserve">
    <value>The list '</value>
  </data>
  <data name="listExists" xml:space="preserve">
    <value>A list with this name already exists. \n Do you want to overwrite it?</value>
  </data>
  <data name="listNotSaved" xml:space="preserve">
    <value>The list won't be saved.</value>
  </data>
  <data name="listSaveSuccess" xml:space="preserve">
    <value>' was save successfully</value>
  </data>
  <data name="markLengthError" xml:space="preserve">
    <value>Field mark must be filled.</value>
  </data>
  <data name="markLengthError2" xml:space="preserve">
    <value>A marca deve ser composta apenas de um caracter</value>
  </data>
  <data name="none" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="notFilledProperlyMessage" xml:space="preserve">
    <value>Some field was not filled in correctly.</value>
  </data>
  <data name="participantNameAlphanumericError" xml:space="preserve">
    <value>Nome do participante deve ser composto apenas de caracteres alphanumericos e sem espaços;\nExemplo: 'LuisAugusto'"</value>
  </data>
  <data name="participantNameLengthError" xml:space="preserve">
    <value>Participant name must be filled.</value>
  </data>
  <data name="programNotAlphanumeric" xml:space="preserve">
    <value>The program name must be composed only of alphanumerical characters and no spaces; \ nExample: 'MyProgram'</value>
  </data>
  <data name="programNotFilled" xml:space="preserve">
    <value>The program name must be filled in.</value>
  </data>
  <data name="programSaved" xml:space="preserve">
    <value>Program was saved with successfully</value>
  </data>
  <data name="reactionTest" xml:space="preserve">
    <value>ReactionTest</value>
  </data>
  <data name="reallyExclude" xml:space="preserve">
    <value>Do you really want to delete</value>
  </data>
  <data name="selectDataFile" xml:space="preserve">
    <value>Select a data file!</value>
  </data>
  <data name="selectPlace" xml:space="preserve">
    <value>Select file destination before recording</value>
  </data>
  <data name="selectTraining" xml:space="preserve">
    <value>Select a training program!</value>
  </data>
  <data name="stroopTest" xml:space="preserve">
    <value>StroopTest</value>
  </data>
  <data name="version" xml:space="preserve">
    <value>Versão</value>
  </data>
  <data name="wishToSave" xml:space="preserve">
    <value>Do you want to save the file</value>
  </data>
  <data name="wordColorList" xml:space="preserve">
    <value>Words with Colors List</value>
  </data>
  <data name="wordList" xml:space="preserve">
    <value>Word Lists:</value>
  </data>
  <data name="words" xml:space="preserve">
    <value>Words</value>
  </data>
  <data name="wordsList" xml:space="preserve">
    <value>Words List</value>
  </data>
</root>